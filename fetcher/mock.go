// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fetcher

import (
	"context"
	"sync"
)

var (
	lockFetcherMockFetch sync.RWMutex
)

// FetcherMock is a mock implementation of Fetcher.
//
//     func TestSomethingThatUsesFetcher(t *testing.T) {
//
//         // make and configure a mocked Fetcher
//         mockedFetcher := &FetcherMock{
//             FetchFunc: func(ctx context.Context, repo string) error {
// 	               panic("TODO: mock out the Fetch method")
//             },
//         }
//
//         // TODO: use mockedFetcher in code that requires Fetcher
//         //       and then make assertions.
//
//     }
type FetcherMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(ctx context.Context, repo string) error

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Repo is the repo argument value.
			Repo string
		}
	}
}

// Fetch calls FetchFunc.
func (mock *FetcherMock) Fetch(ctx context.Context, repo string) error {
	if mock.FetchFunc == nil {
		panic("FetcherMock.FetchFunc: method is nil but Fetcher.Fetch was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Repo string
	}{
		Ctx:  ctx,
		Repo: repo,
	}
	lockFetcherMockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	lockFetcherMockFetch.Unlock()
	return mock.FetchFunc(ctx, repo)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedFetcher.FetchCalls())
func (mock *FetcherMock) FetchCalls() []struct {
	Ctx  context.Context
	Repo string
} {
	var calls []struct {
		Ctx  context.Context
		Repo string
	}
	lockFetcherMockFetch.RLock()
	calls = mock.calls.Fetch
	lockFetcherMockFetch.RUnlock()
	return calls
}
