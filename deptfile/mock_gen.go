// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package deptfile

import (
	"sync"
)

var (
	lockWorkspacerMockDo sync.RWMutex
)

// WorkspacerMock is a mock implementation of Workspacer.
//
//     func TestSomethingThatUsesWorkspacer(t *testing.T) {
//
//         // make and configure a mocked Workspacer
//         mockedWorkspacer := &WorkspacerMock{
//             DoFunc: func(f func(projectDir string, gomod *File) error) error {
// 	               panic("mock out the Do method")
//             },
//         }
//
//         // use mockedWorkspacer in code that requires Workspacer
//         // and then make assertions.
//
//     }
type WorkspacerMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(f func(projectDir string, gomod *File) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// F is the f argument value.
			F func(projectDir string, gomod *File) error
		}
	}
}

// Do calls DoFunc.
func (mock *WorkspacerMock) Do(f func(projectDir string, gomod *File) error) error {
	if mock.DoFunc == nil {
		panic("WorkspacerMock.DoFunc: method is nil but Workspacer.Do was just called")
	}
	callInfo := struct {
		F func(projectDir string, gomod *File) error
	}{
		F: f,
	}
	lockWorkspacerMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockWorkspacerMockDo.Unlock()
	return mock.DoFunc(f)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedWorkspacer.DoCalls())
func (mock *WorkspacerMock) DoCalls() []struct {
	F func(projectDir string, gomod *File) error
} {
	var calls []struct {
		F func(projectDir string, gomod *File) error
	}
	lockWorkspacerMockDo.RLock()
	calls = mock.calls.Do
	lockWorkspacerMockDo.RUnlock()
	return calls
}
