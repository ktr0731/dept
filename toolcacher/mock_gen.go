// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package toolcacher

import (
	"context"
	"sync"
)

var (
	lockCacherMockGet sync.RWMutex
)

// CacherMock is a mock implementation of Cacher.
//
//     func TestSomethingThatUsesCacher(t *testing.T) {
//
//         // make and configure a mocked Cacher
//         mockedCacher := &CacherMock{
//             GetFunc: func(ctx context.Context, pkgName string, version string) (string, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedCacher in code that requires Cacher
//         // and then make assertions.
//
//     }
type CacherMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, pkgName string, version string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PkgName is the pkgName argument value.
			PkgName string
			// Version is the version argument value.
			Version string
		}
	}
}

// Get calls GetFunc.
func (mock *CacherMock) Get(ctx context.Context, pkgName string, version string) (string, error) {
	if mock.GetFunc == nil {
		panic("CacherMock.GetFunc: method is nil but Cacher.Get was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		PkgName string
		Version string
	}{
		Ctx:     ctx,
		PkgName: pkgName,
		Version: version,
	}
	lockCacherMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockCacherMockGet.Unlock()
	return mock.GetFunc(ctx, pkgName, version)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCacher.GetCalls())
func (mock *CacherMock) GetCalls() []struct {
	Ctx     context.Context
	PkgName string
	Version string
} {
	var calls []struct {
		Ctx     context.Context
		PkgName string
		Version string
	}
	lockCacherMockGet.RLock()
	calls = mock.calls.Get
	lockCacherMockGet.RUnlock()
	return calls
}
